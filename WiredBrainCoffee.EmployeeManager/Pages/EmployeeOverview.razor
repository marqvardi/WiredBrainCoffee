@page "/employees/list"
@page "/employees/list/{currentPage:int?}"
@inject IDbContextFactory<EmployeeManagerDbContext> contextFactory
@inject NavigationManager navigationManager

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

@if (Employees is null)
{
    <div>Loading...</div>
}
else
{
    <ul class="pagination mt-3">
        <li class="page-item  @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage - 1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item  @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/employees/list/@i">@i</a>
            </li>
        }
        <li class="page-item  @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>

                <th>FirstName</th>
                <th>LastName</th>
                <th>Is developer</th>
                <th>Department</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Employees)
            {
                <tr>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.IsDeveloper</td>
                    <td>@item.Department?.Name</td>
                </tr>

            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public int? CurrentPage { get; set; }
    private Employee[]? Employees { get; set; }

    private int TotalPages { get; set; }

    private const int ItemsPerPage = 4;

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentPage is null or < 1)
        {
            navigationManager.NavigateTo("/employees/list/1");
            return;
            // CurrentPage = 1;
        }

        using var context = contextFactory.CreateDbContext();

        var employeeCount = await context.Employees.CountAsync();

        TotalPages = employeeCount == 0 ? 1 : (int)Math.Ceiling((double)employeeCount / ItemsPerPage);

        if (CurrentPage > TotalPages)
        {
            navigationManager.NavigateTo($"/employees/list/{TotalPages}");
            return;
        }

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        Employees = await context.Employees
        .Include(c => c.Department)
        .OrderBy(c => c.FirstName)
        .Skip(itemsToSkip)
        .Take(ItemsPerPage)
        .ToArrayAsync();
    }
}
