@page "/employees/add"
@inject IDbContextFactory<EmployeeManagerDbContext> contextFactory
@inject NavigationManager navigationManager

<PageTitle>Add employee</PageTitle>

<h3>Add Employee</h3>

<EmployeeForm Employee="@Employee" Departments="@Departments" IsBusy="@IsBusy" OnSubmit="@HandleSubmit" />


@if (SuccessMessage is not null)
{
    <br />
    <div class="alert alert-success">@SuccessMessage</div>
}

@if (ErrorMessage is not null)
{
    <br />
    <div class="alert alert-danger">@ErrorMessage</div>
}


@code {
    private Employee? Employee { get; set; }
    private Department[]? Departments { get; set; }
    public bool IsBusy { get; set; }
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = contextFactory.CreateDbContext();

        Departments = await context.Departments.OrderBy(c => c.Name).ToArrayAsync();

        Employee = new()
            {
                DepartmentId = Departments.FirstOrDefault()?.Id
            };
    }

    private async Task HandleSubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleValidSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (IsBusy)
            return;

        IsBusy = true;
        try
        {
            if (Employee is not null)
            {
                using var context = contextFactory.CreateDbContext();

                context.Employees.Add(Employee);
                await context.SaveChangesAsync();

                SuccessMessage = $"Employee {Employee.FirstName} {Employee.LastName} added successfully";
                ErrorMessage = null;

                Employee = new()
                    {
                        DepartmentId = Employee.DepartmentId
                    };
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error while adding employee: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }
}
